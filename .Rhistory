site_list_details <- read.csv("data/Deployment Details - Site List.csv")
View(site_list_details)
# Load dataset 1: Detection summary
detection_summary <- read.csv("data/Gg_Detection_Summary.csv")
# Load dataset 2: ADRIFT detections with GPS
adrift_detections <- readxl::read_excel("data/ADRIFT_AllDetections_wGPS.xlsx")
## Load dataset 3: Gg detections from all three surveys with data quality
Gg_detections <- read.csv("data/ADRIFT_GgDetections.csv")
## Load dataset 4: Deployment details and site lists
site_list_details <- read.csv("data/Deployment_Details_Site_List.csv")
# Round coordinates for join
Gg_detections <- Gg_detections %>%
mutate(Lat_round = round(Latitude, 3),
Lon_round = round(Longitude, 3))
deployment_info <- deployment_info %>%
mutate(Lat_round = round(Latitude, 3),
Lon_round = round(Longitude, 3))
# Round lat/lon in both datasets to allow for joining
Gg_detections <- Gg_detections %>%
mutate(Lat_round = round(Latitude, 3),
Lon_round = round(Longitude, 3))
site_list_details <- site_list_details %>%
mutate(Lat_round = round(Latitude, 3),
Lon_round = round(Longitude, 3))
# Initialize RegionCode column in Gg_detections
Gg_detections$RegionCode <- NA
# Assign RegionCode by latitude range
for (i in 1:nrow(site_list_details)) {
region <- site_list_details$RegionCode[i]
lat_min <- site_list_details$Lat_min[i]
lat_max <- site_list_details$Lat_max[i]
# Assign region to detections within lat range
Gg_detections$RegionCode[Gg_detections$Latitude >= lat_min &
Gg_detections$Latitude <= lat_max &
is.na(Gg_detections$RegionCode)] <- region
}
# Clean site_list_details to remove incomplete rows
site_list_details <- site_list_details %>%
filter(!is.na(RegionCode), !is.na(Lat_min), !is.na(Lat_max))
# Clean site_list_details to remove incomplete rows
site_list_details <- site_list_details %>%
filter(!is.na(Region.Code), !is.na(Lat_min), !is.na(Lat_max))
# Create RegionCode column in Gg_detections
Gg_detections$RegionCode <- NA
# Assign region code using dplyr map logic
for (i in 1:nrow(site_list_details)) {
region <- site_list_details$RegionCode[i]
lat_min <- site_list_details$Lat_min[i]
lat_max <- site_list_details$Lat_max[i]
if (!is.na(region) & !is.na(lat_min) & !is.na(lat_max)) {
Gg_detections$RegionCode[
is.na(Gg_detections$RegionCode) &
Gg_detections$Latitude >= lat_min &
Gg_detections$Latitude <= lat_max
] <- region
}
}
library(dplyr)
library(purrr)
# Ensure required columns are clean
site_list_details <- site_list_details %>%
filter(!is.na(Region.Code), !is.na(Lat_min), !is.na(Lat_max))
# Create a function to assign RegionCode by matching lat range
assign_region <- function(lat) {
match <- site_list_details %>%
filter(lat >= Lat_min & lat <= Lat_max) %>%
pull(RegionCode)
if (length(match) > 0) return(match[1]) else return(NA)
}
# Apply the function to all detections
Gg_detections <- Gg_detections %>%
mutate(RegionCode = map_chr(Latitude, assign_region))
library(dplyr)
library(purrr)
# Ensure required columns are clean
site_list_details <- site_list_details %>%
filter(!is.na(Region.Code), !is.na(Lat_min), !is.na(Lat_max))
# Create a function to assign RegionCode by matching lat range
assign_region <- function(lat) {
match <- site_list_details %>%
filter(lat >= Lat_min & lat <= Lat_max) %>%
pull(RegionCode)
if (length(match) > 0) return(match[1]) else return(NA)
}
# Apply the function to all detections
Gg_detections <- Gg_detections %>%
mutate(Region.Code = map_chr(Latitude, assign_region))
library(dplyr)
library(purrr)
# Ensure required columns are clean
site_list_details <- site_list_details %>%
filter(!is.na(Region.Code), !is.na(Lat_min), !is.na(Lat_max))
# Create a function to assign Region.Code by matching lat range
assign_region <- function(lat) {
match <- site_list_details %>%
filter(lat >= Lat_min & lat <= Lat_max) %>%
pull(Region.Code)
if (length(match) > 0) return(match[1]) else return(NA)
}
# Apply the function to all detections
Gg_detections <- Gg_detections %>%
mutate(Region.Code = map_chr(Latitude, assign_region))
# Plot detections colored by region
ggplot() +
geom_polygon(data = us_map, aes(x = long, y = lat, group = group),
fill = "grey95", color = "grey70") +
geom_point(data = Gg_detections, aes(x = Longitude, y = Latitude, color = Region.Code),
size = 2, alpha = 0.8) +
coord_fixed(xlim = c(-130, -120), ylim = c(30, 50)) +
labs(title = "Risso’s Dolphin Detections by Region",
x = "Longitude",
y = "Latitude",
color = "Region") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
library(dplyr)
library(purrr)
library(maps)
library(ggplot2)
# Ensure required columns are clean
site_list_details <- site_list_details %>%
filter(!is.na(Region.Code), !is.na(Lat_min), !is.na(Lat_max)) %>%
rename(Region = Region.Code)  # <- Rename once here
library(dplyr)
library(purrr)
library(maps)
library(ggplot2)
# Ensure required columns are clean
site_list_details <- site_list_details %>%
filter(!is.na(Region), !is.na(Lat_min), !is.na(Lat_max)) %>%
rename(Region = Region)  # <- Rename once here
# Create a function to assign Region by matching lat range
assign_region <- function(lat) {
match <- site_list_details %>%
filter(lat >= Lat_min & lat <= Lat_max) %>%
pull(Region)
if (length(match) > 0) return(match[1]) else return(NA)
}
# Apply the function to all detections
Gg_detections <- Gg_detections %>%
mutate(Region = map_chr(Latitude, assign_region))
# Load base map
us_map <- map_data("world")
# Plot detections colored by Region
ggplot() +
geom_polygon(data = us_map, aes(x = long, y = lat, group = group),
fill = "grey95", color = "grey70") +
geom_point(data = Gg_detections %>% filter(!is.na(Region)),
aes(x = Longitude, y = Latitude, color = Region),
size = 2, alpha = 0.8) +
coord_fixed(xlim = c(-130, -120), ylim = c(30, 50)) +
labs(title = "Risso’s Dolphin Detections by Region",
x = "Longitude",
y = "Latitude",
color = "Region") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
# Perform Chi-square test
region_chisq_result <- chisq.test(region_counts$n)
region_chisq_result
ggplot(region_counts, aes(x = reorder(Region, -n), y = n)) +
geom_col(fill = "grey60", color = "black") +
labs(
title = "Risso's Dolphin Detections by Region",
x = "Region",
y = "Number of Detections"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5)
)
ggplot(region_counts, aes(x = reorder(Region, -n), y = n)) +
geom_col(fill = "grey60", color = "black") +
labs(
title = "Risso's Dolphin Detections by Region",
x = "Region",
y = "Number of Detections"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Create a unique region list sorted by the midpoint of each region's lat range
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%  # north to south
distinct(Region) %>%
pull(Region)
ggplot(region_counts, aes(x = factor(Region, levels = region_order), y = n)) +
geom_col(fill = "grey60", color = "black") +
labs(
title = "Risso's Dolphin Detections by Region",
x = "Region (North to South)",
y = "Number of Detections"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
library(dplyr)
library(purrr)
library(maps)
library(ggplot2)
# Create ordered list of regions by midpoint latitude (north to south)
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%
distinct(Region) %>%
pull(Region)
# Convert Region column to ordered factor
Gg_detections <- Gg_detections %>%
mutate(Region = factor(Region, levels = region_order))
ggplot() +
geom_polygon(data = us_map, aes(x = long, y = lat, group = group),
fill = "grey95", color = "grey70") +
geom_point(data = Gg_detections %>% filter(!is.na(Region)),
aes(x = Longitude, y = Latitude, color = Region),
size = 2, alpha = 0.8) +
coord_fixed(xlim = c(-130, -120), ylim = c(30, 50)) +
labs(title = "Risso’s Dolphin Detections by Region",
x = "Longitude",
y = "Latitude",
color = "Region") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
library(dplyr)
library(purrr)
library(maps)
library(ggplot2)
# Create ordered list of regions by midpoint latitude (north to south)
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%
distinct(Region) %>%
pull(Region)
# Convert Region column to ordered factor
Gg_detections <- Gg_detections %>%
mutate(Region = factor(Region, levels = region_order))
ggplot() +
geom_polygon(data = us_map, aes(x = long, y = lat, group = group),
fill = "grey95", color = "grey70") +
geom_point(data = Gg_detections %>% filter(!is.na(Region)),
aes(x = Longitude, y = Latitude, color = Region),
size = 2, alpha = 0.8) +
coord_fixed(xlim = c(-130, -120), ylim = c(30, 50)) +
labs(title = "Risso’s Dolphin Detections by Region",
x = "Longitude",
y = "Latitude",
color = "Region") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Create ordered list of regions by midpoint latitude (north to south)
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%
distinct(Region) %>%
pull(Region)
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
# Perform Chi-square test
region_chisq_result <- chisq.test(region_counts$n)
region_chisq_result
# Create ordered list of regions by midpoint latitude (north to south)
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%
distinct(Region) %>%
pull(Region)
# Convert Region column to ordered factor
Gg_detections <- Gg_detections %>%
mutate(Region = factor(Region, levels = region_order))
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
# Perform Chi-square test
region_chisq_result <- chisq.test(region_counts$n)
region_chisq_result
library(dplyr)
library(purrr)
# Clean the site list and rename Region
site_list_details <- site_list_details %>%
filter(!is.na(Region.Code), !is.na(Lat_min), !is.na(Lat_max)) %>%
rename(Region = Region.Code)
# Create ordered list of regions by midpoint latitude (north to south)
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%
distinct(Region) %>%
pull(Region)
# Convert Region column to ordered factor
Gg_detections <- Gg_detections %>%
mutate(Region = factor(Region, levels = region_order))
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
# Perform Chi-square test
region_chisq_result <- chisq.test(region_counts$n)
region_chisq_result
# Create ordered list of regions by midpoint latitude (north to south)
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%
distinct(Region) %>%
pull(Region)
# Convert Region column to ordered factor
Gg_detections <- Gg_detections %>%
mutate(Region = factor(Region, levels = region_order))
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
# Perform Chi-square test
region_chisq_result <- chisq.test(region_counts$n)
region_chisq_result
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
# Perform Chi-square test
region_chisq_result <- chisq.test(region_counts$n)
region_chisq_result
# Load and clean site metadata
site_list_details <- site_list_details %>%
filter(!is.na(Region.Code), !is.na(Lat_min), !is.na(Lat_max)) %>%
rename(Region = Region.Code)
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
# Perform Chi-square test
region_chisq_result <- chisq.test(region_counts$n)
region_chisq_result
# Create a unique region list sorted by the midpoint of each region's lat range
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%  # north to south
distinct(Region) %>%
pull(Region)
ggplot(region_counts, aes(x = factor(Region, levels = region_order), y = n)) +
geom_col(fill = "grey60", color = "black") +
labs(
title = "Risso's Dolphin Detections by Region",
x = "Region (North to South)",
y = "Number of Detections"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
library(dplyr)
library(purrr)
library(maps)
library(ggplot2)
# Create ordered list of regions by midpoint latitude (north to south)
region_order <- site_list_details %>%
mutate(Lat_mid = (Lat_min + Lat_max) / 2) %>%
arrange(desc(Lat_mid)) %>%
distinct(Region) %>%
pull(Region)
# Convert Region column to ordered factor
Gg_detections <- Gg_detections %>%
mutate(Region = factor(Region, levels = region_order))
ggplot() +
geom_polygon(data = us_map, aes(x = long, y = lat, group = group),
fill = "grey95", color = "grey70") +
geom_point(data = Gg_detections %>% filter(!is.na(Region)),
aes(x = Longitude, y = Latitude, color = Region),
size = 2, alpha = 0.8) +
coord_fixed(xlim = c(-130, -120), ylim = c(30, 50)) +
labs(title = "Risso’s Dolphin Detections by Region",
x = "Longitude",
y = "Latitude",
color = "Region") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Load dataset 1: Detection summary
detection_summary <- read.csv("data/Gg_Detection_Summary.csv")
# Load dataset 2: ADRIFT detections with GPS
adrift_detections <- readxl::read_excel("data/ADRIFT_AllDetections_wGPS.xlsx")
## Load dataset 3: Gg detections from all three surveys with data quality
Gg_detections <- read.csv("data/ADRIFT_GgDetections.csv")
## Load dataset 4: Deployment details and site lists
site_list_details <- read.csv("data/Deployment_Details_Site_List.csv")
# Load libraries
library(tidyverse)
library(lubridate)
# Load and inspect the data
Gg_detections <- read.csv("data/ADRIFT_GgDetections.csv")
Gg_detections$UTC <- ymd_hms(Gg_detections$UTC)
Gg_detections$Date <- as.Date(Gg_detections$UTC)
Gg_detections$Month <- month(Gg_detections$Date)
# Assign oceanographic season
Gg_detections$Season <- case_when(
Gg_detections$Month %in% 3:6 ~ "Upwelling",
Gg_detections$Month %in% 7:11 ~ "Post-upwelling",
Gg_detections$Month %in% c(12, 1, 2) ~ "Winter",
TRUE ~ NA_character_
)
# Count detections per season
season_counts <- Gg_detections %>%
count(Season) %>%
filter(!is.na(Season)) %>%
arrange(factor(Season, levels = c("Upwelling", "Post-upwelling", "Winter")))
# Perform Chi-square test
chisq_result <- chisq.test(season_counts$n)
chisq_result
ggplot(season_counts, aes(x = Season, y = n)) +
geom_col(fill = "grey60", color = "black") +
labs(
title = "Risso's Dolphin Detections by Oceanographic Season",
x = "Season",
y = "Number of Detections"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5)
)
# Extract hour from timestamp
Gg_detections$Hour <- hour(Gg_detections$UTC)
# Define time-of-day bins
Gg_detections$TimeOfDay <- case_when(
Gg_detections$Hour >= 0 & Gg_detections$Hour < 4 ~ "Night",
Gg_detections$Hour >= 4 & Gg_detections$Hour < 8 ~ "Dawn",
Gg_detections$Hour >= 8 & Gg_detections$Hour < 12 ~ "Morning",
Gg_detections$Hour >= 12 & Gg_detections$Hour < 16 ~ "Afternoon",
Gg_detections$Hour >= 16 & Gg_detections$Hour < 20 ~ "Evening",
Gg_detections$Hour >= 20 & Gg_detections$Hour < 24 ~ "Late Night",
TRUE ~ NA_character_
)
# Count detections per time bin
time_counts <- Gg_detections %>%
count(TimeOfDay) %>%
filter(!is.na(TimeOfDay)) %>%
arrange(factor(TimeOfDay, levels = c("Night", "Dawn", "Morning", "Afternoon", "Evening", "Late Night")))
# Chi-squared test
time_chisq_result <- chisq.test(time_counts$n)
time_chisq_result
# Count detections per time bin and set proper order
time_counts <- Gg_detections %>%
count(TimeOfDay) %>%
filter(!is.na(TimeOfDay)) %>%
mutate(TimeOfDay = factor(TimeOfDay, levels = c(
"Night", "Dawn", "Morning", "Afternoon", "Evening", "Late Night"
)))
ggplot(time_counts, aes(x = TimeOfDay, y = n)) +
geom_col(fill = "grey60", color = "black") +
labs(
title = "Risso's Dolphin Detections by Time of Day",
x = "Time of Day",
y = "Number of Detections"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5)
)
library(maps)
library(ggplot2)
# Get a base map of the west coast
us_map <- map_data("world")
# Plot detections
ggplot() +
geom_polygon(data = us_map, aes(x = long, y = lat, group = group),
fill = "grey95", color = "grey70") +
geom_point(data = Gg_detections, aes(x = Longitude, y = Latitude),
color = "grey20", size = 2, alpha = 0.7) +
coord_fixed(xlim = c(-130, -120), ylim = c(30, 50)) +
labs(title = "Risso’s Dolphin Detections Along the U.S. West Coast",
x = "Longitude",
y = "Latitude") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Summarize detection counts per region
region_counts <- Gg_detections %>%
count(Region) %>%
filter(!is.na(Region)) %>%
arrange(desc(n))
